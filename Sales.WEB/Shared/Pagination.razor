<nav>
    <ul class="pagination pagination-sm justify-content-center">

        @foreach (var link in Links)
        {
            <li @onclick=@(() => InternalSelectedPage(link)) style="cursor: pointer" class="page-item @(link.Enable ? null : "disabled") @(link.Enable ? "active" : null)">
                <a style=" width:70px; display:block; text-align:center" class="page-link">@link.Text</a>
            </li>
        }
    </ul>
</nav>


@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int Radio { get; set; } = 3;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    public int auxPage { get; set; } = 1;
    List<PageModel> Links = new();

    protected override void OnParametersSet()
    {
        Links = new List<PageModel>();

        var previousLinkEnable = CurrentPage != 1;
        var previousLinkPage = CurrentPage - 1;
        Links.Add(new PageModel
            {
                Text = "Anterior",
                Page = previousLinkPage,
                Enable = previousLinkEnable 
            });


        if (TotalPages > 10)
            Radio = 9;
        if (CurrentPage <= Radio+1)
            auxPage = 1;

        for (int i = 1; i <= TotalPages; i++)
        {
            if (i >= CurrentPage - Radio && i <= auxPage + Radio)
            {
                Links.Add(new PageModel
                    {
                        Page = i,
                        Enable = CurrentPage == i,
                        Text = $"{i}"
                    });
            }
        }

        var linkNextEnable = CurrentPage != TotalPages;
        var linkNextPage = CurrentPage + 1;
        Links.Add(new PageModel
            {
                Text = "Siguiente",
                Page = linkNextPage,
                Enable = linkNextEnable
            });

    }

    private async Task InternalSelectedPage(PageModel pageModel)
    {
        if (pageModel.Page == CurrentPage || pageModel.Page == TotalPages +1)
            return;

        if (pageModel.Text.Equals("Anterior") && !pageModel.Enable)
            return;

        CurrentPage = pageModel.Page;


        if (pageModel.Text.Equals("Siguiente") )
            auxPage ++;
        else if(pageModel.Text.Equals("Anterior"))
            auxPage--;

        await SelectedPage.InvokeAsync(pageModel.Page);
    }

    class PageModel
    {
        public string Text { get; set; } = null!;
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }


}
