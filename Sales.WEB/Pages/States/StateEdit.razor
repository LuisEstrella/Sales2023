@page "/states/edit/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Estado / Departamento</h3>

@if (state is null)
{
        <p>Cargandoo..............</p>
}
else
{
    <StateForm @ref="stateForm"
           State="state"
           OnValidSubmit="UpdateAsync"
           ReturnAction="Return">
    </StateForm>
}

@code {
    private string url { get; set; } = "/api/states";
    private State? state { get; set; }
    private StateForm? stateForm { get; set; }

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{StateId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo($"/countries/details/{StateId}");
                return;
            }
            else
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

        }

        state = responseHttp.Response;
    }

    public async Task UpdateAsync()
    {
        var responseHttp = await repository.Put(url, state);
        if (responseHttp.Error)
        {
            var mesagge = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mesagge, SweetAlertIcon.Error);
            return;
        }


        Return();

    }


    public void Return()
    {
        stateForm!.FormPostedSuccesFully = true;
        navigationManager.NavigateTo($"/countries/details/{state!.CountryId}");
    }
}
