@page "/countries"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Países</h3>

<a class="btn btn-primary mb-3" href="/countries/create">Crear País</a>

<GenericList MyList="Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>País</th>
                    <th>Estados/ Departamentos</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td><td>
                            @country.StatesNumber
                        </td>
                        <td>
                            <a href="/countries/details/@country.Id" class="btn btn-info">Detalles</a>
                            <a href="/countries/edit/@country.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                        </td>
                    </tr>   
                }
            </tbody>
        </table>
    </Body>
</GenericList>


@code {

    public List<Country>? Countries { get; set; }
    private string url { get; set; } = "/api/countries";

    protected override async Task OnInitializedAsync()
    {
        await GetAllCountry();
    }

    public async Task GetAllCountry()
    {
        var responseHttp = await repository.Get<List<Country>>(url);
        Countries = responseHttp.Response;
    }

    //private async void DeleteAsync(int id)
    //{
    //    var result = await sweetAlertService.FireAsync(new SweetAlertOptions
    //        {
    //            Title = "Confirmación",
    //            Text = "¿Estas seguro de eliminar el registro seleccionado?",
    //            Icon = SweetAlertIcon.Question,
    //            ShowCancelButton = true,
    //            CancelButtonText = "No",
    //            ConfirmButtonText = "Si"
    //        });

    //    var confirm = string.IsNullOrEmpty(result.Value);
    //    if (confirm)
    //    {
    //        return;
    //    }

    //    var responseHttp = await repository.Delete($"/api/countries/{id}");
    //    if (responseHttp.Error)
    //    {
    //        if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
    //        {
    //            var message = await responseHttp.GetErrorMessageAsync();
    //            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
    //            return;
    //        }

    //    }

    //    await GetAllCountry();
    //    navigationManager.NavigateTo("/countries");

    //}

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/countries/{id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await GetAllCountry();
        }
    }


}
