@page "/categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<h3>Categorias</h3>

<a class="btn btn-primary mb-3" href="/categories/create">Crear Categoria</a>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Categoria</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            <a href="/categories/edit/@category.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))>Borrar</button>
                        </td>
                        <td>
                            @category.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    private string url { get; set; } = "/api/categories";
    private int currentPage = 1;
    private int totalPages;

    public List<Category>? Categories { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetAllCategory();
    }

    public async Task GetAllCategory(int page = 1)
    {
        var url1 = $"api/categories?page={page}";
        var url2 = $"api/categories/totalPages";

        var responseHttp1 = await repository.Get<List<Category>>(url1);
        var responseHttp2 = await repository.Get<int>(url2);

        Categories = responseHttp1.Response;
        totalPages = responseHttp2.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/categories/{id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await GetAllCategory();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await GetAllCategory(page);
    }

}
