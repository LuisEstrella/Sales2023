@page "/categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<h3>Categorias</h3>

@*<a class="btn btn-primary mb-3" href="/categories/create">Crear Categoria</a>*@

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        @*<a class="btn btn-primary" href="/categories/create">Crear Categoria</a>*@
        <a class="btn btn-primary" @onclick=@(() => ShowModal())>Crear Categoria</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar categoria..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th style="width:220px">Categoria</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            @*<a href="/categories/edit/@category.Id" class="btn btn-warning">Editar</a>*@
                            <a @onclick=@(() => ShowModal(category.Id, true)) class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    private string url { get; set; } = "/api/categories";
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    public List<Category>? Categories { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetAllCategory();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CategoryEdit>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            modalReference = Modal.Show<CategoryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await GetAllCategory();
        }
    }


    public async Task GetAllCategory(int page = 1)
    {

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}";
            url2 = $"api/categories/totalPages?filter={Filter}";
        }



        //var url1 = $"api/categories?page={page}";
        //var url2 = $"api/categories/totalPages";

        var responseHttp1 = await repository.Get<List<Category>>(url1);
        var responseHttp2 = await repository.Get<int>(url2);

        Categories = responseHttp1.Response;
        totalPages = responseHttp2.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/categories/{id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await GetAllCategory();
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await GetAllCategory(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await GetAllCategory(page);
        await SelectedPageAsync(page);
    }

}
